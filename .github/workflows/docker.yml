name: Publish stac-browser image

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual trigger
    inputs:
      force: 
        description: Force to rebuild all images
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  STAC_BROWSER_REPO: radiantearth/stac-browser
  IMAGE_NAME: ghcr.io/alekzvik/stac-browser-prefix
  PATH_PREFIX: /browser

jobs:
  extract-meta:
    runs-on: ubuntu-latest
    outputs:
      build_tag: ${{steps.repo-meta.outputs.last_tag}}
      build_commit: ${{steps.repo-meta.outputs.last_commit}}
      need_edge: ${{steps.pick.outputs.need_edge}}
      need_release: ${{steps.pick.outputs.need_release}}
    steps:
      - name: install skopeo
        if: ${{ env.ACT }}
        run: |
          sudo apt update
          sudo apt install -y skopeo

      - name: Checkout stac-browser repo
        uses: actions/checkout@v4
        with:
          repository: ${{env.STAC_BROWSER_REPO}}
          ref: main
          fetch-depth: 0
      
      - name: Extract repo metadata
        id: repo-meta
        run: |
          LAST_COMMIT=$(git rev-parse HEAD)

          LAST_TAG_COMMIT=$(git rev-list --tags --max-count=1)
          LAST_TAG=$(git describe --tags $LAST_TAG_COMMIT)

          echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "last_tag_commit=$LAST_TAG_COMMIT" >> $GITHUB_OUTPUT

          echo "last_commit=$LAST_COMMIT"
          echo "last_tag=$LAST_TAG"
          echo "last_tag_commit=$LAST_TAG_COMMIT"
      
      - name: Extract package metadata
        id: package-meta
        continue-on-error: true
        run: |
          LATEST_COMMIT=$(skopeo inspect docker://${{ env.IMAGE_NAME }}:latest | jq '.Labels."org.opencontainers.image.revision"' -r)
          EDGE_COMMIT=$(skopeo inspect docker://${{ env.IMAGE_NAME }}:edge | jq '.Labels."org.opencontainers.image.revision"' -r)
          
          echo "last_tag_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "last_commit=$EDGE_COMMIT" >> $GITHUB_OUTPUT

          echo "last_tag_commit=$LATEST_COMMIT"
          echo "last_commit=$EDGE_COMMIT"

      - name: Pick what to do
        id: pick
        run: |
          # Check if repo and package have the same commit in edge
          NEED_EDGE=0
          if [[ "${{steps.package-meta.outputs.last_commit}}" != "${{steps.repo-meta.outputs.last_commit}}" ]]; then
            NEED_EDGE=1
          fi
          echo "need_edge=$NEED_EDGE" >> $GITHUB_OUTPUT
          echo "need_edge=$NEED_EDGE"

          # Check if repo and package have the same commit in latest
          NEED_RELEASE=0
          if [[ "${{steps.package-meta.outputs.last_tag_commit}}" != "${{steps.repo-meta.outputs.last_tag_commit}}" ]]; then
            NEED_RELEASE=1
          fi
          echo "need_release=$NEED_RELEASE" >> $GITHUB_OUTPUT
          echo "need_release=$NEED_RELEASE"

      - name: Prepare summary
        run: |
          echo '## Planned work summary' >> $GITHUB_STEP_SUMMARY
          echo '### Edge release (or main branch)' >> $GITHUB_STEP_SUMMARY
          echo 'Last commit in repo: ${{ steps.repo-meta.outputs.last_commit }}' >> $GITHUB_STEP_SUMMARY
          echo 'Last commit in `edge` release: ${{ steps.package-meta.outputs.last_commit }}' >> $GITHUB_STEP_SUMMARY
          echo 'Outcome:' >> $GITHUB_STEP_SUMMARY
          if [ ${{ steps.pick.outputs.need_edge == 1}} ]; then
            echo 'Building `edge` release with the commit: ${{ steps.repo-meta.outputs.last_commit }}' >> $GITHUB_STEP_SUMMARY
          else
            echo 'Commits are the same, no need to build edge' >> $GITHUB_STEP_SUMMARY
          fi
          echo '### Latest release (or last tag)' >> $GITHUB_STEP_SUMMARY
          echo 'Last tag in repo: ${{ steps.repo-meta.outputs.last_tag }}' >> $GITHUB_STEP_SUMMARY
          echo 'with commit for this tag: ${{ steps.repo-meta.outputs.last_tag_commit }}' >> $GITHUB_STEP_SUMMARY
          echo 'Last commit in `latest` release: ${{ steps.package-meta.outputs.last_tag_commit }}' >> $GITHUB_STEP_SUMMARY
          echo 'Outcome:' >> $GITHUB_STEP_SUMMARY
          if [ ${{ steps.pick.outputs.need_release == 1}} ]; then
            echo 'Building `latest` release with tag: ${{ steps.repo-meta.outputs.last_tag }}' >> $GITHUB_STEP_SUMMARY
          else
            echo 'Commits are the same, no need to build latest' >> $GITHUB_STEP_SUMMARY
          fi
      

  push-release:
    if: ${{ needs.extract-meta.outputs.need_release || github.event.inputs.force }}
    needs: extract-meta
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout stac-browser repo
        id: checkout
        uses: actions/checkout@v4
        with:
          repository: ${{env.STAC_BROWSER_REPO}}
          ref: ${{needs.extract-meta.outputs.build_tag}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{env.IMAGE_NAME}}
          tags: |
            type=semver,pattern={{version}},value=${{steps.checkout.outputs.ref}}
          annotations: |
            org.opencontainers.image.revision=${{steps.checkout.outputs.commit}}
            org.opencontainers.image.source=https://github.com/${{env.STAC_BROWSER_REPO}}
          labels: |
            org.opencontainers.image.revision=${{steps.checkout.outputs.commit}}
            org.opencontainers.image.source=https://github.com/${{env.STAC_BROWSER_REPO}}
  
      - name: Log in to the GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner  }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: pathPrefix=${{ env.PATH_PREFIX }}
          tags: ${{steps.meta.outputs.tags}}
          labels: ${{steps.meta.outputs.labels}}
          annotations: ${{steps.meta.outputs.annotations}}
          cache-from: type=gha
          cache-to: type=gha,mode=max  
    
  push-edge:
    if: ${{ needs.extract-meta.outputs.need_edge || github.event.inputs.force}}
    needs: extract-meta
    permissions:
      packages: write
      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout stac-browser repo
        id: checkout
        uses: actions/checkout@v4
        with:
          repository: ${{env.STAC_BROWSER_REPO}}
          ref: ${{needs.extract-meta.outputs.build_commit}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{env.IMAGE_NAME}}
          tags: |
            type=edge
          annotations: |
            org.opencontainers.image.revision=${{steps.checkout.outputs.commit}}
            org.opencontainers.image.source=https://github.com/${{env.STAC_BROWSER_REPO}}
          labels: |
            org.opencontainers.image.revision=${{steps.checkout.outputs.commit}}
            org.opencontainers.image.source=https://github.com/${{env.STAC_BROWSER_REPO}}

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner  }}
          password: ${{ secrets.GITHUB_TOKEN }}
              
      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: pathPrefix=${{ env.PATH_PREFIX }}
          tags: ${{steps.meta.outputs.tags}}
          labels: ${{steps.meta.outputs.labels}}
          annotations: ${{steps.meta.outputs.annotations}}
          cache-from: type=gha
          cache-to: type=gha,mode=max  

